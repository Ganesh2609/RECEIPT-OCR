

def analysis_prompt():
    return """

    You are given an NLP statement. Your task is to determine whether the statement is associated with any of the following features: plot, image. Each feature should be identified as either true or false based on the statement.

    Output format: <image> <split-token> <plot>

    Consider the following:
    1) plot: If the statement requires any kind of graphical representation such as a histogram, bar plot, line chart, scatter plot, etc., mark this as 'True'.
    2) image: If the statement involves displaying any static images by retrieving it from the database, mark this as 'True'.

    Use this while generating the output:
    <plot> : Boolean value indicating whether the question is associated with a plot or not. It is set to True if there is a plot asked for (associated with it) and False if not. 
    <image> : Boolean value indicating whether the question is associated with an image or not. It is set to True if there is an image asked for and the respective image field is present in the dataset, False otherwise. 
    <split-token> : This is the split token generated in order to ensure that the various fields generated by the model (SQL Query, plot, image, etc) doesnt get merged with each other. 
    This is the context given to you, generate the output based on this.

    NOTE:
    1) Don't ever forget to generate the <split-token> inbetween the various field values.
    2) Ananlyse the entire statement properly before generating the values for each of the parameter mentioned
    3) Dont ever generate the names like <image>, <plot>, etc in the output
    6) You dont worry about the structure of the database as of now, just analyse whether there is an image or plot associated with the question.
    7) Two or more field values cannot be 'True' at the same time.

    Don't forget that the output should be in the format: <image> <split-token> <plot>, where each field (plot, image) is a boolean value ('True' or 'False').

    """
    
    
    
    
    
    


def general_prompt():

    table_structure = {
        'bill_info' : 'CREATE TABLE bill_info ( BillID INTEGER PRIMARY KEY AUTOINCREMENT, StoreName TEXT NOT NULL, StoreAddress TEXT NOT NULL, Tel TEXT NOT NULL, BillDate DATE NOT NULL, BillTime TIME NOT NULL, SubTotal REAL NOT NULL, Total REAL NOT NULL, Tax REAL NOT NULL, Tips REAL);',
        'porducts' : 'CREATE TABLE products ( ProductID INTEGER PRIMARY KEY AUTOINCREMENT, BillID INTEGER, ProductName TEXT NOT NULL, Quantity INTEGER NOT NULL, Price REAL NOT NULL, FOREIGN KEY (BillID) REFERENCES bill_info (BillID));',
        'images' : 'CREATE TABLE images ( id INTEGER PRIMARY KEY AUTOINCREMENT, bill_img BLOB NOT NULL, upload_date DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP, FOREIGN KEY (BillID) REFERENCES bill_info (BillID));'
    }
    
    prompt = f"""
    Your are an expert and intellectual person in converting English questions to SQL queries! 

    The database schema consisting of 2 databases is as follows : {table_structure}
        
    NOTE:
    1) The database consists of all these tables and the data is interlinked between tables with the help of foreign kwy. Keep that in mind and perform joins accordingly when asked for interrelated queries. 
    2) Don't generate values like ``` before the start of the SQL Query.
    3) Avoid including extra information or explanations in the output. Only provide the SQL query as described.
    4) Validate that the SQL query meets the conditions specified in the question and accurately reflects the table schema.
    5) Dont ever generate wrong outputs, it misleads with the quality of data that we process and use, a small error can lead to greater consequences.
    
    Examples:
    1) Question: What is the total amount of all bills?
       Answer: SELECT SUM(Total) FROM bill_info;
    2) Question: How many products have been purchased across all bills?
       Answer: SELECT SUM(Quantity) FROM products;
    3) Question: Get the names of stores where the total bill amount exceeds 500.
       Answer: SELECT StoreName FROM bill_info WHERE Total > 500;
    4) Question: Retrieve the total tax collected across all bills.
       Answer: SELECT SUM(Tax) FROM bill_info;
    5) Question: List the product names and their quantities for a bill with BillID 1.
       Answer: SELECT ProductName, Quantity FROM products WHERE BillID = 1;
    6) Question: Find the number of images associated with a bill having a total amount greater than 1000.
       Answer: SELECT COUNT(*) FROM images WHERE BillID IN (SELECT BillID FROM bill_info WHERE Total > 1000);
    7) Question: What is the average subtotal of all bills?
       Answer: SELECT AVG(SubTotal) FROM bill_info;
    
    Remember that the only output should the SQL Query to retrieve the data asked for as a query, not anything else. 
    
    Now, convert my english statement to the required SQL Query. Be cautious, mistakes are heavily penalised here.
        
    """
    
    return prompt




def image_prompt():

    table_structure = {
        'bill_info' : 'CREATE TABLE bill_info ( BillID INTEGER PRIMARY KEY AUTOINCREMENT, StoreName TEXT NOT NULL, StoreAddress TEXT NOT NULL, Tel TEXT NOT NULL, BillDate DATE NOT NULL, BillTime TIME NOT NULL, SubTotal REAL NOT NULL, Total REAL NOT NULL, Tax REAL NOT NULL, Tips REAL);',
        'porducts' : 'CREATE TABLE products ( ProductID INTEGER PRIMARY KEY AUTOINCREMENT, BillID INTEGER, ProductName TEXT NOT NULL, Quantity INTEGER NOT NULL, Price REAL NOT NULL, FOREIGN KEY (BillID) REFERENCES bill_info (BillID));',
        'images' : 'CREATE TABLE images ( id INTEGER PRIMARY KEY AUTOINCREMENT, bill_img BLOB NOT NULL, upload_date DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP, FOREIGN KEY (BillID) REFERENCES bill_info (BillID));'
    }

    prompt = f"""
    Your are an expert and intellectual person in converting English questions to SQL queries specifically for image retrieval and image processing!
    The question given includes retrieving an image directly or retrieving an image based on a specific condition. ou have to give the SQL Query to retrieve the specified image from the Database. 

    Output format : <sql-query> <split-token> <statement>
    
    Consider the following while generating the response:
    1) <sql-query>: Generate the required SQL Query as a string here. If the database doesnt contain an image (BLOB Format), return 'None' here. Don't give any explanations here.
    2) <statement>: This is the final output english statement. This tells what is displayed in the figure window. This will tell the user based on what conditions extracted from the question, the below given image is displayed and what image is displayed with a gramatically correct syntax. If the database doesnt contain an image (BLOB Format), return the string 'The database doesn't contain an image field column in order to retrieve according to your query' here. Refer NOTE section for extra reference.
    3) <split-token> : This is the split token generated in order to ensure that the various fields generated by the model (SQL Query, plot, image, etc) doesnt get merged with each other. 
    This is the context given to you, generate the output based on this.

    The table structure is as follows : {table_structure}
        
    NOTE:
    1) Don't generate values like ``` before the start and and after the end of the Output
    2) Avoid including extra information or explanations in the output. Only provide the output as in the described format.
    3) Validate that the SQL query meets the conditions specified in the question and accurately reflects the table schema.
    4) Dont ever generate wrong outputs, it misleads with the quality of data that we process and use, a small error can lead to greater consequences.
    5) Strictly adhere to the output format given in the prompt.
    
    Examples:
    1) Question: Retrieve the image of the bill with the highest total amount.
       Answer: SELECT bill_img FROM images WHERE BillID = (SELECT BillID FROM bill_info ORDER BY Total DESC LIMIT 1); <split-token> The image of the bill with the highest total amount as requested is as follows:
    2) Question: Display the image of the most recently uploaded bill.
       Answer: SELECT bill_img FROM images ORDER BY upload_date DESC LIMIT 1; <split-token> The image of the most recently uploaded bill as requested is as follows:
    3) Question: Show the image of the bill for StoreName "SuperMart".
       Answer: SELECT bill_img FROM images WHERE BillID IN (SELECT BillID FROM bill_info WHERE StoreName = 'SuperMart'); <split-token> The image of the bill for the store named "SuperMart" as requested is as follows:
    4) Question: Display the image of the bill uploaded on '2024-11-01'.
       Answer: SELECT bill_img FROM images WHERE DATE(upload_date) = '2024-11-01'; <split-token> The image of the bill uploaded on '2024-11-01' as requested is as follows:
    5) Question: Retrieve the image of the bill with the highest tax.
       Answer: SELECT bill_img FROM images WHERE BillID = (SELECT BillID FROM bill_info ORDER BY Tax DESC LIMIT 1); <split-token> The image of the bill with the highest tax as requested is as follows:
    6) Question: Show the image of the bill with BillID 10.
       Answer: SELECT bill_img FROM images WHERE BillID = 10; <split-token> The image of the bill with BillID 10 as requested is as follows:
    
    
    Output format again for your reference : <sql-query> <split-token> <statement>
    
    """
    
    return prompt




def plot_prompt():

    table_structure = {
        'bill_info' : 'CREATE TABLE bill_info ( BillID INTEGER PRIMARY KEY AUTOINCREMENT, StoreName TEXT NOT NULL, StoreAddress TEXT NOT NULL, Tel TEXT NOT NULL, BillDate DATE NOT NULL, BillTime TIME NOT NULL, SubTotal REAL NOT NULL, Total REAL NOT NULL, Tax REAL NOT NULL, Tips REAL);',
        'porducts' : 'CREATE TABLE products ( ProductID INTEGER PRIMARY KEY AUTOINCREMENT, BillID INTEGER, ProductName TEXT NOT NULL, Quantity INTEGER NOT NULL, Price REAL NOT NULL, FOREIGN KEY (BillID) REFERENCES bill_info (BillID));',
        'images' : 'CREATE TABLE images ( id INTEGER PRIMARY KEY AUTOINCREMENT, bill_img BLOB NOT NULL, upload_date DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP, FOREIGN KEY (BillID) REFERENCES bill_info (BillID));'
    }

    prompt = f"""
    Your are an expert and intellectual person in converting English questions to SQL queries specifically for plotting. You are a expert at generating queries for retrieving the data specified and required for the plot, generating the correct plot type and the output statement.

    Output format : <sql-query> <split-token> <plot-type> <split-token> <plot-title> <split-token> <plot-xlabel> <split-token> <plot-ylabel> <split-token> <statement>
    
    Consider the following while generating the response:
    1) <sql-query> : This contains the SQL query to retrieve the data in order to generate the plot asked for. 
    2) <plot-type> : This will contain the plot type from the list ['histogram', 'bar-plot', 'line-plot', 'pie-chart', 'scatter-plot']. Analyse the plot type correctly and dont generate any explanations here, only the plot type string as asked in the question.
    3) <plot-title> : This will contain the proper shrinked english title for the plot according to the question.
    4) <plot-xlabel> : This will contain the x-label to be displayed in the plot according to the question and the table structure.
    5) <plot-ylabel> : This will contain the y-label to be displayed in the plot according to the question and the table structure.
    6) <statement> : This is the final output statement. This will tell what should be displayed while displaying the plot. It contains the information about what is displayed along with the plot type in a proper gramatically correct english statement.
    7) <split-token> : This is the split token generated in order to ensure that the various fields generated by the model (SQL Query, plot, image, etc) doesnt get merged with each other. 
    This is the context given to you, generate the output based on this.

    The table structure is as follows : {table_structure}
        
    NOTE:
    1) Identify the required plot type properly as returning the wrong plot type might lead to critical errors.
    2) Generate the proper statement which describes the plot accuractely in the <statement> field.
    3) Generate the proper plot-title, plot-xlabel and plot-ylabel as wrong titles and labels are highly punishable.
    4) Don't generate values like ``` before the start and and after the end of the Output
    5) Avoid including extra information or explanations in the output. Only provide the output as in the described format.
    6) Validate that the SQL query meets the conditions specified in the question and accurately reflects the table schema.
    7) Dont ever generate wrong outputs, it misleads with the quality of data that we process and use, a small error can lead to greater consequences.
    8) Strictly adhere to the output format given in the prompt.
    9) While generating the queries for histograms, the label should always appear in the first column while the value should appear in the second column.
    
Examples:
    1) Question : Display the histogram of total amounts for each store.
       Answer : SELECT StoreName, SUM(Total) FROM bill_info GROUP BY StoreName; <split-token> histogram <split-token> Total Amounts for Each Store <split-token> Store Name <split-token> Total Amount <split-token> The histogram shows the total amounts for each store as requested.
    2) Question : Show the bar plot of the average tax for each store.
       Answer : SELECT StoreName, AVG(Tax) FROM bill_info GROUP BY StoreName; <split-token> bar-plot <split-token> Average Tax per Store <split-token> Store Name <split-token> Average Tax <split-token> The bar plot shows the average tax for each store as requested.
    3) Question : Display the line plot of total revenue over bill dates.
       Answer : SELECT BillDate, SUM(Total) FROM bill_info GROUP BY BillDate; <split-token> line-plot <split-token> Total Revenue Over Bill Dates <split-token> Bill Date <split-token> Total Revenue <split-token> The line plot shows the total revenue over bill dates as requested.
    4) Question : Display the scatter plot of total vs. tax for all bills.
       Answer : SELECT Total, Tax FROM bill_info; <split-token> scatter-plot <split-token> Total vs. Tax for Bills <split-token> Total Amount <split-token> Tax Amount <split-token> The scatter plot shows the relationship between total amounts and tax amounts for all bills as requested.
    5) Question : Show the pie chart of the number of bills per store.
       Answer : SELECT StoreName, COUNT(*) FROM bill_info GROUP BY StoreName; <split-token> pie-chart <split-token> Number of Bills per Store <split-token> Store Name <split-token> Number of Bills <split-token> The pie chart shows the number of bills per store as requested.swer: SELECT LOCATION, COUNT(*) FROM Event GROUP BY LOCATION; <split-token> bar-plot <split-token> Number of Events per Location <split-token> Location <split-token> Number of Events <split-token> The bar plot shows the number of events per location as requested.
    
    
    Output format again for your reference : <sql-query> <split-token> <plot-type> <split-token> <plot-title> <split-token> <plot-xlabel> <split-token> <plot-ylabel> <split-token> <statement>
    
    """
    
    return prompt